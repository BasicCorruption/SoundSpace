// Generated by Haxe 4.0.5
#ifndef INCLUDED_io_github_keystone_games_soundspace_Data
#define INCLUDED_io_github_keystone_games_soundspace_Data

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS4(io,github,keystone_games,soundspace,Data)

namespace io{
namespace github{
namespace keystone_games{
namespace soundspace{


class HXCPP_CLASS_ATTRIBUTES Data_obj : public hx::Object
{
	public:
		typedef hx::Object super;
		typedef Data_obj OBJ_;
		Data_obj();

	public:
		enum { _hx_ClassId = 0x540ee092 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="io.github.keystone_games.soundspace.Data")
			{ return hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return hx::Object::operator new(inSize+extra,false,"io.github.keystone_games.soundspace.Data"); }

		inline static hx::ObjectPtr< Data_obj > __new() {
			hx::ObjectPtr< Data_obj > __this = new Data_obj();
			__this->__construct();
			return __this;
		}

		inline static hx::ObjectPtr< Data_obj > __alloc(hx::Ctx *_hx_ctx) {
			Data_obj *__this = (Data_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(Data_obj), false, "io.github.keystone_games.soundspace.Data"));
			*(void **)__this = Data_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(hx::DynamicArray inArgs);
		//~Data_obj();

		HX_DO_RTTI_ALL;
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Data",4a,82,3c,2d); }

		static void __boot();
		static ::String Menu__wav__asd;
		static ::String Tutorial__mp3;
		static ::String Tutorial__wav;
		static ::String ico__svg;
		static ::String Menu__mp3__asd;
		static ::String Menu__wav;
		static ::String Menu__mp3;
		static ::String icon__ico;
};

} // end namespace io
} // end namespace github
} // end namespace keystone_games
} // end namespace soundspace

#endif /* INCLUDED_io_github_keystone_games_soundspace_Data */ 
