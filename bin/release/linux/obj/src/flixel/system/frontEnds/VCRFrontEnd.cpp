// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_InputFrontEnd
#include <flixel/system/frontEnds/InputFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_VCRFrontEnd
#include <flixel/system/frontEnds/VCRFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_replay_FlxReplay
#include <flixel/system/replay/FlxReplay.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_ui_Mouse
#include <openfl/ui/Mouse.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9c3075758433de87_21_new,"flixel.system.frontEnds.VCRFrontEnd","new",0x9592d9ef,"flixel.system.frontEnds.VCRFrontEnd.new","flixel/system/frontEnds/VCRFrontEnd.hx",21,0xa1666a42)
HX_LOCAL_STACK_FRAME(_hx_pos_9c3075758433de87_66_pause,"flixel.system.frontEnds.VCRFrontEnd","pause",0x6797a245,"flixel.system.frontEnds.VCRFrontEnd.pause","flixel/system/frontEnds/VCRFrontEnd.hx",66,0xa1666a42)
HX_LOCAL_STACK_FRAME(_hx_pos_9c3075758433de87_86_resume,"flixel.system.frontEnds.VCRFrontEnd","resume",0x5616837e,"flixel.system.frontEnds.VCRFrontEnd.resume","flixel/system/frontEnds/VCRFrontEnd.hx",86,0xa1666a42)
HX_LOCAL_STACK_FRAME(_hx_pos_9c3075758433de87_110_restartReplay,"flixel.system.frontEnds.VCRFrontEnd","restartReplay",0x86a89aa5,"flixel.system.frontEnds.VCRFrontEnd.restartReplay","flixel/system/frontEnds/VCRFrontEnd.hx",110,0xa1666a42)
HX_LOCAL_STACK_FRAME(_hx_pos_9c3075758433de87_124_loadReplay,"flixel.system.frontEnds.VCRFrontEnd","loadReplay",0x957eec3e,"flixel.system.frontEnds.VCRFrontEnd.loadReplay","flixel/system/frontEnds/VCRFrontEnd.hx",124,0xa1666a42)
HX_LOCAL_STACK_FRAME(_hx_pos_9c3075758433de87_161_reloadReplay,"flixel.system.frontEnds.VCRFrontEnd","reloadReplay",0x2d5d03f1,"flixel.system.frontEnds.VCRFrontEnd.reloadReplay","flixel/system/frontEnds/VCRFrontEnd.hx",161,0xa1666a42)
HX_LOCAL_STACK_FRAME(_hx_pos_9c3075758433de87_181_stopReplay,"flixel.system.frontEnds.VCRFrontEnd","stopReplay",0x0a030f1a,"flixel.system.frontEnds.VCRFrontEnd.stopReplay","flixel/system/frontEnds/VCRFrontEnd.hx",181,0xa1666a42)
HX_LOCAL_STACK_FRAME(_hx_pos_9c3075758433de87_200_cancelReplay,"flixel.system.frontEnds.VCRFrontEnd","cancelReplay",0x1e656cd2,"flixel.system.frontEnds.VCRFrontEnd.cancelReplay","flixel/system/frontEnds/VCRFrontEnd.hx",200,0xa1666a42)
HX_LOCAL_STACK_FRAME(_hx_pos_9c3075758433de87_217_startRecording,"flixel.system.frontEnds.VCRFrontEnd","startRecording",0xf60de900,"flixel.system.frontEnds.VCRFrontEnd.startRecording","flixel/system/frontEnds/VCRFrontEnd.hx",217,0xa1666a42)
HX_LOCAL_STACK_FRAME(_hx_pos_9c3075758433de87_243_stopRecording,"flixel.system.frontEnds.VCRFrontEnd","stopRecording",0xa7f958de,"flixel.system.frontEnds.VCRFrontEnd.stopRecording","flixel/system/frontEnds/VCRFrontEnd.hx",243,0xa1666a42)
HX_LOCAL_STACK_FRAME(_hx_pos_9c3075758433de87_271_onOpen,"flixel.system.frontEnds.VCRFrontEnd","onOpen",0x39d0265a,"flixel.system.frontEnds.VCRFrontEnd.onOpen","flixel/system/frontEnds/VCRFrontEnd.hx",271,0xa1666a42)
HX_LOCAL_STACK_FRAME(_hx_pos_9c3075758433de87_286_destroy,"flixel.system.frontEnds.VCRFrontEnd","destroy",0xb6caaa09,"flixel.system.frontEnds.VCRFrontEnd.destroy","flixel/system/frontEnds/VCRFrontEnd.hx",286,0xa1666a42)
HX_LOCAL_STACK_FRAME(_hx_pos_9c3075758433de87_298_onOpenSelect,"flixel.system.frontEnds.VCRFrontEnd","onOpenSelect",0xe2c3f4f6,"flixel.system.frontEnds.VCRFrontEnd.onOpenSelect","flixel/system/frontEnds/VCRFrontEnd.hx",298,0xa1666a42)
HX_LOCAL_STACK_FRAME(_hx_pos_9c3075758433de87_314_onOpenComplete,"flixel.system.frontEnds.VCRFrontEnd","onOpenComplete",0xe1becd33,"flixel.system.frontEnds.VCRFrontEnd.onOpenComplete","flixel/system/frontEnds/VCRFrontEnd.hx",314,0xa1666a42)
HX_LOCAL_STACK_FRAME(_hx_pos_9c3075758433de87_341_onOpenCancel,"flixel.system.frontEnds.VCRFrontEnd","onOpenCancel",0x30c4c774,"flixel.system.frontEnds.VCRFrontEnd.onOpenCancel","flixel/system/frontEnds/VCRFrontEnd.hx",341,0xa1666a42)
HX_LOCAL_STACK_FRAME(_hx_pos_9c3075758433de87_353_onOpenError,"flixel.system.frontEnds.VCRFrontEnd","onOpenError",0xc65bcf0e,"flixel.system.frontEnds.VCRFrontEnd.onOpenError","flixel/system/frontEnds/VCRFrontEnd.hx",353,0xa1666a42)
HX_LOCAL_STACK_FRAME(_hx_pos_9c3075758433de87_366_onSaveComplete,"flixel.system.frontEnds.VCRFrontEnd","onSaveComplete",0xb6297fa6,"flixel.system.frontEnds.VCRFrontEnd.onSaveComplete","flixel/system/frontEnds/VCRFrontEnd.hx",366,0xa1666a42)
HX_LOCAL_STACK_FRAME(_hx_pos_9c3075758433de87_380_onSaveCancel,"flixel.system.frontEnds.VCRFrontEnd","onSaveCancel",0x2be1e727,"flixel.system.frontEnds.VCRFrontEnd.onSaveCancel","flixel/system/frontEnds/VCRFrontEnd.hx",380,0xa1666a42)
HX_LOCAL_STACK_FRAME(_hx_pos_9c3075758433de87_393_onSaveError,"flixel.system.frontEnds.VCRFrontEnd","onSaveError",0xe1e366bb,"flixel.system.frontEnds.VCRFrontEnd.onSaveError","flixel/system/frontEnds/VCRFrontEnd.hx",393,0xa1666a42)
namespace flixel{
namespace _hx_system{
namespace frontEnds{

void VCRFrontEnd_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_9c3075758433de87_21_new)
HXLINE(  59)		this->stepRequested = false;
HXLINE(  54)		this->paused = false;
HXLINE(  44)		this->timeout = ((Float)0);
            	}

Dynamic VCRFrontEnd_obj::__CreateEmpty() { return new VCRFrontEnd_obj; }

void *VCRFrontEnd_obj::_hx_vtable = 0;

Dynamic VCRFrontEnd_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< VCRFrontEnd_obj > _hx_result = new VCRFrontEnd_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool VCRFrontEnd_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x5d659b41;
}

void VCRFrontEnd_obj::pause(){
            	HX_STACKFRAME(&_hx_pos_9c3075758433de87_66_pause)
HXDLIN(  66)		if (!(this->paused)) {
HXLINE(  69)			if (!(::flixel::FlxG_obj::mouse->useSystemCursor)) {
HXLINE(  70)				::openfl::ui::Mouse_obj::show();
            			}
HXLINE(  73)			this->paused = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(VCRFrontEnd_obj,pause,(void))

void VCRFrontEnd_obj::resume(){
            	HX_STACKFRAME(&_hx_pos_9c3075758433de87_86_resume)
HXDLIN(  86)		if (this->paused) {
HXLINE(  89)			if (!(::flixel::FlxG_obj::mouse->useSystemCursor)) {
HXLINE(  90)				::openfl::ui::Mouse_obj::hide();
            			}
HXLINE(  93)			this->paused = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(VCRFrontEnd_obj,resume,(void))

void VCRFrontEnd_obj::restartReplay(hx::Null< bool >  __o_StandardMode){
            		bool StandardMode = __o_StandardMode.Default(false);
            	HX_STACKFRAME(&_hx_pos_9c3075758433de87_110_restartReplay)
HXDLIN( 110)		::flixel::FlxG_obj::vcr->reloadReplay(StandardMode);
            	}


HX_DEFINE_DYNAMIC_FUNC1(VCRFrontEnd_obj,restartReplay,(void))

void VCRFrontEnd_obj::loadReplay(::String Data, ::flixel::FlxState State,::Array< int > CancelKeys, ::Dynamic __o_Timeout, ::Dynamic Callback){
            		 ::Dynamic Timeout = __o_Timeout;
            		if (hx::IsNull(__o_Timeout)) Timeout = 0;
            	HX_STACKFRAME(&_hx_pos_9c3075758433de87_124_loadReplay)
HXLINE( 125)		::flixel::FlxG_obj::game->_replay->load(Data);
HXLINE( 127)		if (hx::IsNull( State )) {
HXLINE( 129)			::flixel::FlxG_obj::game->_resetGame = true;
            		}
            		else {
HXLINE( 133)			if (::flixel::FlxG_obj::game->_state->switchTo(State)) {
HXLINE( 133)				::flixel::FlxG_obj::game->_requestedState = State;
            			}
            		}
HXLINE( 136)		this->cancelKeys = CancelKeys;
HXLINE( 137)		this->timeout = ( (Float)(::Std_obj::_hx_int((( (Float)(Timeout) ) * ( (Float)(1000) )))) );
HXLINE( 138)		this->replayCallback = Callback;
HXLINE( 139)		::flixel::FlxG_obj::game->_replayRequested = true;
HXLINE( 142)		::flixel::FlxG_obj::keys->enabled = false;
HXLINE( 146)		::flixel::FlxG_obj::mouse->enabled = false;
            	}


HX_DEFINE_DYNAMIC_FUNC5(VCRFrontEnd_obj,loadReplay,(void))

void VCRFrontEnd_obj::reloadReplay(hx::Null< bool >  __o_StandardMode){
            		bool StandardMode = __o_StandardMode.Default(true);
            	HX_STACKFRAME(&_hx_pos_9c3075758433de87_161_reloadReplay)
HXLINE( 162)		if (StandardMode) {
HXLINE( 164)			::flixel::FlxG_obj::game->_resetGame = true;
            		}
            		else {
HXLINE( 168)			 ::flixel::FlxState nextState = ( ( ::flixel::FlxState)(::Type_obj::createInstance(::Type_obj::getClass(::flixel::FlxG_obj::game->_state),::cpp::VirtualArray_obj::__new(0))) );
HXDLIN( 168)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 168)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
HXLINE( 171)		if ((::flixel::FlxG_obj::game->_replay->frameCount > 0)) {
HXLINE( 173)			::flixel::FlxG_obj::game->_replayRequested = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(VCRFrontEnd_obj,reloadReplay,(void))

void VCRFrontEnd_obj::stopReplay(){
            	HX_STACKFRAME(&_hx_pos_9c3075758433de87_181_stopReplay)
HXLINE( 182)		::flixel::FlxG_obj::game->replaying = false;
HXLINE( 183)		::flixel::FlxG_obj::inputs->reset();
HXLINE( 190)		::flixel::FlxG_obj::keys->enabled = true;
HXLINE( 194)		::flixel::FlxG_obj::mouse->enabled = true;
            	}


HX_DEFINE_DYNAMIC_FUNC0(VCRFrontEnd_obj,stopReplay,(void))

void VCRFrontEnd_obj::cancelReplay(){
            	HX_STACKFRAME(&_hx_pos_9c3075758433de87_200_cancelReplay)
HXDLIN( 200)		if (hx::IsNotNull( this->replayCallback )) {
HXLINE( 202)			this->replayCallback();
HXLINE( 203)			this->replayCallback = null();
            		}
            		else {
HXLINE( 207)			::flixel::FlxG_obj::game->replaying = false;
HXDLIN( 207)			::flixel::FlxG_obj::inputs->reset();
HXDLIN( 207)			::flixel::FlxG_obj::keys->enabled = true;
HXDLIN( 207)			::flixel::FlxG_obj::mouse->enabled = true;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(VCRFrontEnd_obj,cancelReplay,(void))

void VCRFrontEnd_obj::startRecording(hx::Null< bool >  __o_StandardMode){
            		bool StandardMode = __o_StandardMode.Default(true);
            	HX_STACKFRAME(&_hx_pos_9c3075758433de87_217_startRecording)
HXLINE( 218)		 ::flixel::math::FlxRandom _this = ::flixel::FlxG_obj::random;
HXDLIN( 218)		int NewSeed;
HXDLIN( 218)		if (StandardMode) {
HXLINE( 218)			NewSeed = ::flixel::FlxG_obj::random->initialSeed;
            		}
            		else {
HXLINE( 218)			NewSeed = ::flixel::math::FlxRandom_obj::_stateSeed;
            		}
HXDLIN( 218)		Float lowerBound;
HXDLIN( 218)		if ((NewSeed < 1)) {
HXLINE( 218)			lowerBound = ( (Float)(1) );
            		}
            		else {
HXLINE( 218)			lowerBound = ( (Float)(NewSeed) );
            		}
HXDLIN( 218)		Float NewSeed1;
HXDLIN( 218)		if ((lowerBound > (int)2147483646)) {
HXLINE( 218)			NewSeed1 = ( (Float)((int)2147483646) );
            		}
            		else {
HXLINE( 218)			NewSeed1 = lowerBound;
            		}
HXDLIN( 218)		int NewSeed2 = ::Std_obj::_hx_int(NewSeed1);
HXDLIN( 218)		Float lowerBound1;
HXDLIN( 218)		if ((NewSeed2 < 1)) {
HXLINE( 218)			lowerBound1 = ( (Float)(1) );
            		}
            		else {
HXLINE( 218)			lowerBound1 = ( (Float)(NewSeed2) );
            		}
HXDLIN( 218)		Float _hx_tmp;
HXDLIN( 218)		if ((lowerBound1 > (int)2147483646)) {
HXLINE( 218)			_hx_tmp = ( (Float)((int)2147483646) );
            		}
            		else {
HXLINE( 218)			_hx_tmp = lowerBound1;
            		}
HXDLIN( 218)		::flixel::math::FlxRandom_obj::_recordingSeed = (_this->initialSeed = ::Std_obj::_hx_int((_this->internalSeed = ( (Float)(::Std_obj::_hx_int(_hx_tmp)) ))));
HXLINE( 220)		if (StandardMode) {
HXLINE( 222)			::flixel::FlxG_obj::game->_resetGame = true;
            		}
            		else {
HXLINE( 226)			 ::flixel::FlxState nextState = ( ( ::flixel::FlxState)(::Type_obj::createInstance(::Type_obj::getClass(::flixel::FlxG_obj::game->_state),::cpp::VirtualArray_obj::__new(0))) );
HXDLIN( 226)			if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 226)				::flixel::FlxG_obj::game->_requestedState = nextState;
            			}
            		}
HXLINE( 229)		::flixel::FlxG_obj::game->_recordingRequested = true;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VCRFrontEnd_obj,startRecording,(void))

::String VCRFrontEnd_obj::stopRecording(hx::Null< bool >  __o_OpenSaveDialog){
            		bool OpenSaveDialog = __o_OpenSaveDialog.Default(true);
            	HX_STACKFRAME(&_hx_pos_9c3075758433de87_243_stopRecording)
HXLINE( 244)		::flixel::FlxG_obj::game->recording = false;
HXLINE( 251)		::String data = ::flixel::FlxG_obj::game->_replay->save();
HXLINE( 253)		bool _hx_tmp;
HXDLIN( 253)		bool _hx_tmp1;
HXDLIN( 253)		if (OpenSaveDialog) {
HXLINE( 253)			_hx_tmp1 = hx::IsNotNull( data );
            		}
            		else {
HXLINE( 253)			_hx_tmp1 = false;
            		}
HXDLIN( 253)		if (_hx_tmp1) {
HXLINE( 253)			_hx_tmp = (data.length > 0);
            		}
            		else {
HXLINE( 253)			_hx_tmp = false;
            		}
HXLINE( 263)		return data;
            	}


HX_DEFINE_DYNAMIC_FUNC1(VCRFrontEnd_obj,stopRecording,return )

void VCRFrontEnd_obj::onOpen(){
            	HX_STACKFRAME(&_hx_pos_9c3075758433de87_271_onOpen)
            	}


HX_DEFINE_DYNAMIC_FUNC0(VCRFrontEnd_obj,onOpen,(void))

void VCRFrontEnd_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_9c3075758433de87_286_destroy)
HXDLIN( 286)		this->cancelKeys = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(VCRFrontEnd_obj,destroy,(void))

void VCRFrontEnd_obj::onOpenSelect( ::Dynamic _){
            	HX_STACKFRAME(&_hx_pos_9c3075758433de87_298_onOpenSelect)
            	}


HX_DEFINE_DYNAMIC_FUNC1(VCRFrontEnd_obj,onOpenSelect,(void))

void VCRFrontEnd_obj::onOpenComplete( ::Dynamic _){
            	HX_STACKFRAME(&_hx_pos_9c3075758433de87_314_onOpenComplete)
            	}


HX_DEFINE_DYNAMIC_FUNC1(VCRFrontEnd_obj,onOpenComplete,(void))

void VCRFrontEnd_obj::onOpenCancel( ::Dynamic _){
            	HX_STACKFRAME(&_hx_pos_9c3075758433de87_341_onOpenCancel)
            	}


HX_DEFINE_DYNAMIC_FUNC1(VCRFrontEnd_obj,onOpenCancel,(void))

void VCRFrontEnd_obj::onOpenError( ::Dynamic _){
            	HX_STACKFRAME(&_hx_pos_9c3075758433de87_353_onOpenError)
            	}


HX_DEFINE_DYNAMIC_FUNC1(VCRFrontEnd_obj,onOpenError,(void))

void VCRFrontEnd_obj::onSaveComplete( ::Dynamic _){
            	HX_STACKFRAME(&_hx_pos_9c3075758433de87_366_onSaveComplete)
            	}


HX_DEFINE_DYNAMIC_FUNC1(VCRFrontEnd_obj,onSaveComplete,(void))

void VCRFrontEnd_obj::onSaveCancel( ::Dynamic _){
            	HX_STACKFRAME(&_hx_pos_9c3075758433de87_380_onSaveCancel)
            	}


HX_DEFINE_DYNAMIC_FUNC1(VCRFrontEnd_obj,onSaveCancel,(void))

void VCRFrontEnd_obj::onSaveError( ::Dynamic _){
            	HX_STACKFRAME(&_hx_pos_9c3075758433de87_393_onSaveError)
            	}


HX_DEFINE_DYNAMIC_FUNC1(VCRFrontEnd_obj,onSaveError,(void))


hx::ObjectPtr< VCRFrontEnd_obj > VCRFrontEnd_obj::__new() {
	hx::ObjectPtr< VCRFrontEnd_obj > __this = new VCRFrontEnd_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< VCRFrontEnd_obj > VCRFrontEnd_obj::__alloc(hx::Ctx *_hx_ctx) {
	VCRFrontEnd_obj *__this = (VCRFrontEnd_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(VCRFrontEnd_obj), true, "flixel.system.frontEnds.VCRFrontEnd"));
	*(void **)__this = VCRFrontEnd_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

VCRFrontEnd_obj::VCRFrontEnd_obj()
{
}

void VCRFrontEnd_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(VCRFrontEnd);
	HX_MARK_MEMBER_NAME(replayCallback,"replayCallback");
	HX_MARK_MEMBER_NAME(cancelKeys,"cancelKeys");
	HX_MARK_MEMBER_NAME(timeout,"timeout");
	HX_MARK_MEMBER_NAME(paused,"paused");
	HX_MARK_MEMBER_NAME(stepRequested,"stepRequested");
	HX_MARK_END_CLASS();
}

void VCRFrontEnd_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(replayCallback,"replayCallback");
	HX_VISIT_MEMBER_NAME(cancelKeys,"cancelKeys");
	HX_VISIT_MEMBER_NAME(timeout,"timeout");
	HX_VISIT_MEMBER_NAME(paused,"paused");
	HX_VISIT_MEMBER_NAME(stepRequested,"stepRequested");
}

hx::Val VCRFrontEnd_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"pause") ) { return hx::Val( pause_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"paused") ) { return hx::Val( paused ); }
		if (HX_FIELD_EQ(inName,"resume") ) { return hx::Val( resume_dyn() ); }
		if (HX_FIELD_EQ(inName,"onOpen") ) { return hx::Val( onOpen_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"timeout") ) { return hx::Val( timeout ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"cancelKeys") ) { return hx::Val( cancelKeys ); }
		if (HX_FIELD_EQ(inName,"loadReplay") ) { return hx::Val( loadReplay_dyn() ); }
		if (HX_FIELD_EQ(inName,"stopReplay") ) { return hx::Val( stopReplay_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"onOpenError") ) { return hx::Val( onOpenError_dyn() ); }
		if (HX_FIELD_EQ(inName,"onSaveError") ) { return hx::Val( onSaveError_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"reloadReplay") ) { return hx::Val( reloadReplay_dyn() ); }
		if (HX_FIELD_EQ(inName,"cancelReplay") ) { return hx::Val( cancelReplay_dyn() ); }
		if (HX_FIELD_EQ(inName,"onOpenSelect") ) { return hx::Val( onOpenSelect_dyn() ); }
		if (HX_FIELD_EQ(inName,"onOpenCancel") ) { return hx::Val( onOpenCancel_dyn() ); }
		if (HX_FIELD_EQ(inName,"onSaveCancel") ) { return hx::Val( onSaveCancel_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"stepRequested") ) { return hx::Val( stepRequested ); }
		if (HX_FIELD_EQ(inName,"restartReplay") ) { return hx::Val( restartReplay_dyn() ); }
		if (HX_FIELD_EQ(inName,"stopRecording") ) { return hx::Val( stopRecording_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"replayCallback") ) { return hx::Val( replayCallback ); }
		if (HX_FIELD_EQ(inName,"startRecording") ) { return hx::Val( startRecording_dyn() ); }
		if (HX_FIELD_EQ(inName,"onOpenComplete") ) { return hx::Val( onOpenComplete_dyn() ); }
		if (HX_FIELD_EQ(inName,"onSaveComplete") ) { return hx::Val( onSaveComplete_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val VCRFrontEnd_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"paused") ) { paused=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"timeout") ) { timeout=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"cancelKeys") ) { cancelKeys=inValue.Cast< ::Array< int > >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"stepRequested") ) { stepRequested=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"replayCallback") ) { replayCallback=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void VCRFrontEnd_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("cancelKeys",8e,40,f1,b5));
	outFields->push(HX_("timeout",a1,1a,f7,d8));
	outFields->push(HX_("paused",ae,40,84,ef));
	outFields->push(HX_("stepRequested",82,98,54,d1));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo VCRFrontEnd_obj_sMemberStorageInfo[] = {
	{hx::fsObject /*  ::Dynamic */ ,(int)offsetof(VCRFrontEnd_obj,replayCallback),HX_("replayCallback",0c,3c,c0,40)},
	{hx::fsObject /* ::Array< int > */ ,(int)offsetof(VCRFrontEnd_obj,cancelKeys),HX_("cancelKeys",8e,40,f1,b5)},
	{hx::fsFloat,(int)offsetof(VCRFrontEnd_obj,timeout),HX_("timeout",a1,1a,f7,d8)},
	{hx::fsBool,(int)offsetof(VCRFrontEnd_obj,paused),HX_("paused",ae,40,84,ef)},
	{hx::fsBool,(int)offsetof(VCRFrontEnd_obj,stepRequested),HX_("stepRequested",82,98,54,d1)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *VCRFrontEnd_obj_sStaticStorageInfo = 0;
#endif

static ::String VCRFrontEnd_obj_sMemberFields[] = {
	HX_("replayCallback",0c,3c,c0,40),
	HX_("cancelKeys",8e,40,f1,b5),
	HX_("timeout",a1,1a,f7,d8),
	HX_("paused",ae,40,84,ef),
	HX_("stepRequested",82,98,54,d1),
	HX_("pause",f6,d6,57,bd),
	HX_("resume",ad,69,84,08),
	HX_("restartReplay",56,68,a6,7e),
	HX_("loadReplay",ed,15,ad,bb),
	HX_("reloadReplay",60,37,ac,da),
	HX_("stopReplay",c9,38,31,30),
	HX_("cancelReplay",41,a0,b4,cb),
	HX_("startRecording",2f,16,24,fc),
	HX_("stopRecording",8f,26,f7,9f),
	HX_("onOpen",89,0c,3e,ec),
	HX_("destroy",fa,2c,86,24),
	HX_("onOpenSelect",65,28,13,90),
	HX_("onOpenComplete",62,fa,d4,e7),
	HX_("onOpenCancel",e3,fa,13,de),
	HX_("onOpenError",7f,1e,92,08),
	HX_("onSaveComplete",d5,ac,3f,bc),
	HX_("onSaveCancel",96,1a,31,d9),
	HX_("onSaveError",2c,b6,19,24),
	::String(null()) };

hx::Class VCRFrontEnd_obj::__mClass;

void VCRFrontEnd_obj::__register()
{
	VCRFrontEnd_obj _hx_dummy;
	VCRFrontEnd_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("flixel.system.frontEnds.VCRFrontEnd",7d,b6,ad,b5);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(VCRFrontEnd_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< VCRFrontEnd_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = VCRFrontEnd_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = VCRFrontEnd_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace system
} // end namespace frontEnds
