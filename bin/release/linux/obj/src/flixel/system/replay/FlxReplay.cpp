// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_InputFrontEnd
#include <flixel/system/frontEnds/InputFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_system_replay_CodeValuePair
#include <flixel/system/replay/CodeValuePair.h>
#endif
#ifndef INCLUDED_flixel_system_replay_FlxReplay
#include <flixel/system/replay/FlxReplay.h>
#endif
#ifndef INCLUDED_flixel_system_replay_FrameRecord
#include <flixel/system/replay/FrameRecord.h>
#endif
#ifndef INCLUDED_flixel_system_replay_MouseRecord
#include <flixel/system/replay/MouseRecord.h>
#endif
#ifndef INCLUDED_flixel_util_FlxArrayUtil
#include <flixel/util/FlxArrayUtil.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9df76580410629a7_54_new,"flixel.system.replay.FlxReplay","new",0x4c74c9d1,"flixel.system.replay.FlxReplay.new","flixel/system/replay/FlxReplay.hx",54,0xb378fa20)
HX_LOCAL_STACK_FRAME(_hx_pos_9df76580410629a7_68_destroy,"flixel.system.replay.FlxReplay","destroy",0xd75f32eb,"flixel.system.replay.FlxReplay.destroy","flixel/system/replay/FlxReplay.hx",68,0xb378fa20)
HX_LOCAL_STACK_FRAME(_hx_pos_9df76580410629a7_87_create,"flixel.system.replay.FlxReplay","create",0x64c12a2b,"flixel.system.replay.FlxReplay.create","flixel/system/replay/FlxReplay.hx",87,0xb378fa20)
HX_LOCAL_STACK_FRAME(_hx_pos_9df76580410629a7_101_load,"flixel.system.replay.FlxReplay","load",0x9870e395,"flixel.system.replay.FlxReplay.load","flixel/system/replay/FlxReplay.hx",101,0xb378fa20)
HX_LOCAL_STACK_FRAME(_hx_pos_9df76580410629a7_134_save,"flixel.system.replay.FlxReplay","save",0x9d06d4ac,"flixel.system.replay.FlxReplay.save","flixel/system/replay/FlxReplay.hx",134,0xb378fa20)
HX_LOCAL_STACK_FRAME(_hx_pos_9df76580410629a7_152_recordFrame,"flixel.system.replay.FlxReplay","recordFrame",0x1269564d,"flixel.system.replay.FlxReplay.recordFrame","flixel/system/replay/FlxReplay.hx",152,0xb378fa20)
HX_LOCAL_STACK_FRAME(_hx_pos_9df76580410629a7_194_playNextFrame,"flixel.system.replay.FlxReplay","playNextFrame",0x34ad7657,"flixel.system.replay.FlxReplay.playNextFrame","flixel/system/replay/FlxReplay.hx",194,0xb378fa20)
HX_LOCAL_STACK_FRAME(_hx_pos_9df76580410629a7_228_rewind,"flixel.system.replay.FlxReplay","rewind",0xf3d1ed2a,"flixel.system.replay.FlxReplay.rewind","flixel/system/replay/FlxReplay.hx",228,0xb378fa20)
HX_LOCAL_STACK_FRAME(_hx_pos_9df76580410629a7_238_init,"flixel.system.replay.FlxReplay","init",0x9674847f,"flixel.system.replay.FlxReplay.init","flixel/system/replay/FlxReplay.hx",238,0xb378fa20)
namespace flixel{
namespace _hx_system{
namespace replay{

void FlxReplay_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_9df76580410629a7_54_new)
HXLINE(  55)		this->seed = 0;
HXLINE(  56)		this->frame = 0;
HXLINE(  57)		this->frameCount = 0;
HXLINE(  58)		this->finished = false;
HXLINE(  59)		this->_frames = null();
HXLINE(  60)		this->_capacity = 0;
HXLINE(  61)		this->_marker = 0;
            	}

Dynamic FlxReplay_obj::__CreateEmpty() { return new FlxReplay_obj; }

void *FlxReplay_obj::_hx_vtable = 0;

Dynamic FlxReplay_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< FlxReplay_obj > _hx_result = new FlxReplay_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool FlxReplay_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x14a40f17;
}

void FlxReplay_obj::destroy(){
            	HX_STACKFRAME(&_hx_pos_9df76580410629a7_68_destroy)
HXLINE(  69)		if (hx::IsNull( this->_frames )) {
HXLINE(  71)			return;
            		}
HXLINE(  73)		int i = (this->frameCount - 1);
HXLINE(  74)		while((i >= 0)){
HXLINE(  76)			i = (i - 1);
HXDLIN(  76)			this->_frames->__get((i + 1)).StaticCast<  ::flixel::_hx_system::replay::FrameRecord >()->destroy();
            		}
HXLINE(  78)		this->_frames = null();
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxReplay_obj,destroy,(void))

void FlxReplay_obj::create(int Seed){
            	HX_STACKFRAME(&_hx_pos_9df76580410629a7_87_create)
HXLINE(  88)		this->destroy();
HXLINE(  89)		this->init();
HXLINE(  90)		this->seed = Seed;
HXLINE(  91)		this->rewind();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxReplay_obj,create,(void))

void FlxReplay_obj::load(::String FileContents){
            	HX_GC_STACKFRAME(&_hx_pos_9df76580410629a7_101_load)
HXLINE( 102)		this->init();
HXLINE( 104)		::Array< ::String > lines = FileContents.split(HX_("\n",0a,00,00,00));
HXLINE( 106)		this->seed = ( (int)(::Std_obj::parseInt(lines->__get(0))) );
HXLINE( 108)		::String line;
HXLINE( 109)		int i = 1;
HXLINE( 110)		int l = lines->length;
HXLINE( 111)		while((i < l)){
HXLINE( 113)			i = (i + 1);
HXDLIN( 113)			line = lines->__get((i - 1));
HXLINE( 114)			if ((line.length > 3)) {
HXLINE( 116)				this->_frames[this->frameCount++] =  ::flixel::_hx_system::replay::FrameRecord_obj::__alloc( HX_CTX )->load(line);
HXLINE( 117)				if ((this->frameCount >= this->_capacity)) {
HXLINE( 119)					 ::flixel::_hx_system::replay::FlxReplay _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 119)					_hx_tmp->_capacity = (_hx_tmp->_capacity * 2);
HXLINE( 120)					::flixel::util::FlxArrayUtil_obj::setLength_flixel_system_replay_FrameRecord(this->_frames,this->_capacity);
            				}
            			}
            		}
HXLINE( 125)		this->rewind();
            	}


HX_DEFINE_DYNAMIC_FUNC1(FlxReplay_obj,load,(void))

::String FlxReplay_obj::save(){
            	HX_STACKFRAME(&_hx_pos_9df76580410629a7_134_save)
HXLINE( 135)		if ((this->frameCount <= 0)) {
HXLINE( 137)			return null();
            		}
HXLINE( 139)		::String output = (this->seed + HX_("\n",0a,00,00,00));
HXLINE( 140)		int i = 0;
HXLINE( 141)		while((i < this->frameCount)){
HXLINE( 143)			i = (i + 1);
HXDLIN( 143)			output = (output + (this->_frames->__get((i - 1)).StaticCast<  ::flixel::_hx_system::replay::FrameRecord >()->save() + HX_("\n",0a,00,00,00)));
            		}
HXLINE( 145)		return output;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxReplay_obj,save,return )

void FlxReplay_obj::recordFrame(){
            	HX_GC_STACKFRAME(&_hx_pos_9df76580410629a7_152_recordFrame)
HXLINE( 153)		bool continueFrame = true;
HXLINE( 156)		::Array< ::Dynamic> keysRecord = ::flixel::FlxG_obj::keys->record();
HXLINE( 157)		if (hx::IsNotNull( keysRecord )) {
HXLINE( 158)			continueFrame = false;
            		}
HXLINE( 162)		 ::flixel::_hx_system::replay::MouseRecord mouseRecord = ::flixel::FlxG_obj::mouse->record();
HXLINE( 163)		if (hx::IsNotNull( mouseRecord )) {
HXLINE( 164)			continueFrame = false;
            		}
HXLINE( 167)		if (continueFrame) {
HXLINE( 169)			this->frame++;
HXLINE( 170)			return;
            		}
HXLINE( 173)		 ::flixel::_hx_system::replay::FrameRecord frameRecorded =  ::flixel::_hx_system::replay::FrameRecord_obj::__alloc( HX_CTX );
HXDLIN( 173)		 ::flixel::_hx_system::replay::FrameRecord frameRecorded1 = frameRecorded->create(( (Float)(this->frame++) ),null(),null());
HXLINE( 175)		frameRecorded1->mouse = mouseRecord;
HXLINE( 178)		frameRecorded1->keys = keysRecord;
HXLINE( 181)		this->_frames[this->frameCount++] = frameRecorded1;
HXLINE( 183)		if ((this->frameCount >= this->_capacity)) {
HXLINE( 185)			 ::flixel::_hx_system::replay::FlxReplay _hx_tmp = hx::ObjectPtr<OBJ_>(this);
HXDLIN( 185)			_hx_tmp->_capacity = (_hx_tmp->_capacity * 2);
HXLINE( 186)			::flixel::util::FlxArrayUtil_obj::setLength_flixel_system_replay_FrameRecord(this->_frames,this->_capacity);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxReplay_obj,recordFrame,(void))

void FlxReplay_obj::playNextFrame(){
            	HX_STACKFRAME(&_hx_pos_9df76580410629a7_194_playNextFrame)
HXLINE( 195)		::flixel::FlxG_obj::inputs->reset();
HXLINE( 197)		if ((this->_marker >= this->frameCount)) {
HXLINE( 199)			this->finished = true;
HXLINE( 200)			return;
            		}
HXLINE( 202)		int _hx_tmp = this->_frames->__get(this->_marker).StaticCast<  ::flixel::_hx_system::replay::FrameRecord >()->frame;
HXDLIN( 202)		if ((_hx_tmp != this->frame++)) {
HXLINE( 204)			return;
            		}
HXLINE( 207)		 ::flixel::_hx_system::replay::FrameRecord fr = this->_frames->__get(this->_marker++).StaticCast<  ::flixel::_hx_system::replay::FrameRecord >();
HXLINE( 210)		if (hx::IsNotNull( fr->keys )) {
HXLINE( 212)			::flixel::FlxG_obj::keys->playback(fr->keys);
            		}
HXLINE( 217)		if (hx::IsNotNull( fr->mouse )) {
HXLINE( 219)			::flixel::FlxG_obj::mouse->playback(fr->mouse);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxReplay_obj,playNextFrame,(void))

void FlxReplay_obj::rewind(){
            	HX_STACKFRAME(&_hx_pos_9df76580410629a7_228_rewind)
HXLINE( 229)		this->_marker = 0;
HXLINE( 230)		this->frame = 0;
HXLINE( 231)		this->finished = false;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxReplay_obj,rewind,(void))

void FlxReplay_obj::init(){
            	HX_STACKFRAME(&_hx_pos_9df76580410629a7_238_init)
HXLINE( 239)		this->_capacity = 100;
HXLINE( 240)		this->_frames = ::Array_obj< ::Dynamic>::__new();
HXLINE( 241)		::flixel::util::FlxArrayUtil_obj::setLength_flixel_system_replay_FrameRecord(this->_frames,this->_capacity);
HXLINE( 242)		this->frameCount = 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(FlxReplay_obj,init,(void))


hx::ObjectPtr< FlxReplay_obj > FlxReplay_obj::__new() {
	hx::ObjectPtr< FlxReplay_obj > __this = new FlxReplay_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< FlxReplay_obj > FlxReplay_obj::__alloc(hx::Ctx *_hx_ctx) {
	FlxReplay_obj *__this = (FlxReplay_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(FlxReplay_obj), true, "flixel.system.replay.FlxReplay"));
	*(void **)__this = FlxReplay_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

FlxReplay_obj::FlxReplay_obj()
{
}

void FlxReplay_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(FlxReplay);
	HX_MARK_MEMBER_NAME(seed,"seed");
	HX_MARK_MEMBER_NAME(frame,"frame");
	HX_MARK_MEMBER_NAME(frameCount,"frameCount");
	HX_MARK_MEMBER_NAME(finished,"finished");
	HX_MARK_MEMBER_NAME(_frames,"_frames");
	HX_MARK_MEMBER_NAME(_capacity,"_capacity");
	HX_MARK_MEMBER_NAME(_marker,"_marker");
	HX_MARK_END_CLASS();
}

void FlxReplay_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(seed,"seed");
	HX_VISIT_MEMBER_NAME(frame,"frame");
	HX_VISIT_MEMBER_NAME(frameCount,"frameCount");
	HX_VISIT_MEMBER_NAME(finished,"finished");
	HX_VISIT_MEMBER_NAME(_frames,"_frames");
	HX_VISIT_MEMBER_NAME(_capacity,"_capacity");
	HX_VISIT_MEMBER_NAME(_marker,"_marker");
}

hx::Val FlxReplay_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"seed") ) { return hx::Val( seed ); }
		if (HX_FIELD_EQ(inName,"load") ) { return hx::Val( load_dyn() ); }
		if (HX_FIELD_EQ(inName,"save") ) { return hx::Val( save_dyn() ); }
		if (HX_FIELD_EQ(inName,"init") ) { return hx::Val( init_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"frame") ) { return hx::Val( frame ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"rewind") ) { return hx::Val( rewind_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_frames") ) { return hx::Val( _frames ); }
		if (HX_FIELD_EQ(inName,"_marker") ) { return hx::Val( _marker ); }
		if (HX_FIELD_EQ(inName,"destroy") ) { return hx::Val( destroy_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"finished") ) { return hx::Val( finished ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_capacity") ) { return hx::Val( _capacity ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"frameCount") ) { return hx::Val( frameCount ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"recordFrame") ) { return hx::Val( recordFrame_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"playNextFrame") ) { return hx::Val( playNextFrame_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

hx::Val FlxReplay_obj::__SetField(const ::String &inName,const hx::Val &inValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"seed") ) { seed=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"frame") ) { frame=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"_frames") ) { _frames=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"_marker") ) { _marker=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"finished") ) { finished=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"_capacity") ) { _capacity=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"frameCount") ) { frameCount=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void FlxReplay_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("seed",71,85,50,4c));
	outFields->push(HX_("frame",2d,78,83,06));
	outFields->push(HX_("frameCount",62,79,89,2d));
	outFields->push(HX_("finished",72,93,0e,95));
	outFields->push(HX_("_frames",45,c1,fc,1a));
	outFields->push(HX_("_capacity",99,f8,50,0b));
	outFields->push(HX_("_marker",59,87,e7,28));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo FlxReplay_obj_sMemberStorageInfo[] = {
	{hx::fsInt,(int)offsetof(FlxReplay_obj,seed),HX_("seed",71,85,50,4c)},
	{hx::fsInt,(int)offsetof(FlxReplay_obj,frame),HX_("frame",2d,78,83,06)},
	{hx::fsInt,(int)offsetof(FlxReplay_obj,frameCount),HX_("frameCount",62,79,89,2d)},
	{hx::fsBool,(int)offsetof(FlxReplay_obj,finished),HX_("finished",72,93,0e,95)},
	{hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(FlxReplay_obj,_frames),HX_("_frames",45,c1,fc,1a)},
	{hx::fsInt,(int)offsetof(FlxReplay_obj,_capacity),HX_("_capacity",99,f8,50,0b)},
	{hx::fsInt,(int)offsetof(FlxReplay_obj,_marker),HX_("_marker",59,87,e7,28)},
	{ hx::fsUnknown, 0, null()}
};
static hx::StaticInfo *FlxReplay_obj_sStaticStorageInfo = 0;
#endif

static ::String FlxReplay_obj_sMemberFields[] = {
	HX_("seed",71,85,50,4c),
	HX_("frame",2d,78,83,06),
	HX_("frameCount",62,79,89,2d),
	HX_("finished",72,93,0e,95),
	HX_("_frames",45,c1,fc,1a),
	HX_("_capacity",99,f8,50,0b),
	HX_("_marker",59,87,e7,28),
	HX_("destroy",fa,2c,86,24),
	HX_("create",fc,66,0f,7c),
	HX_("load",26,9a,b7,47),
	HX_("save",3d,8b,4d,4c),
	HX_("recordFrame",dc,03,98,ba),
	HX_("playNextFrame",a6,e5,0d,48),
	HX_("rewind",fb,29,20,0b),
	HX_("init",10,3b,bb,45),
	::String(null()) };

hx::Class FlxReplay_obj::__mClass;

void FlxReplay_obj::__register()
{
	FlxReplay_obj _hx_dummy;
	FlxReplay_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("flixel.system.replay.FlxReplay",5f,8d,5d,08);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = hx::Class_obj::dupFunctions(FlxReplay_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< FlxReplay_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = FlxReplay_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = FlxReplay_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace flixel
} // end namespace system
} // end namespace replay
