// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_io_github_keystone_games_soundspace_Reference
#include <io/github/keystone_games/soundspace/Reference.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_ddd0252177761b46_6_boot,"io.github.keystone_games.soundspace.Reference","boot",0x696a90a9,"io.github.keystone_games.soundspace.Reference.boot","io/github/keystone_games/soundspace/Reference.hx",6,0x58753387)
HX_LOCAL_STACK_FRAME(_hx_pos_ddd0252177761b46_7_boot,"io.github.keystone_games.soundspace.Reference","boot",0x696a90a9,"io.github.keystone_games.soundspace.Reference.boot","io/github/keystone_games/soundspace/Reference.hx",7,0x58753387)
HX_LOCAL_STACK_FRAME(_hx_pos_ddd0252177761b46_8_boot,"io.github.keystone_games.soundspace.Reference","boot",0x696a90a9,"io.github.keystone_games.soundspace.Reference.boot","io/github/keystone_games/soundspace/Reference.hx",8,0x58753387)
HX_LOCAL_STACK_FRAME(_hx_pos_ddd0252177761b46_10_boot,"io.github.keystone_games.soundspace.Reference","boot",0x696a90a9,"io.github.keystone_games.soundspace.Reference.boot","io/github/keystone_games/soundspace/Reference.hx",10,0x58753387)
HX_LOCAL_STACK_FRAME(_hx_pos_ddd0252177761b46_11_boot,"io.github.keystone_games.soundspace.Reference","boot",0x696a90a9,"io.github.keystone_games.soundspace.Reference.boot","io/github/keystone_games/soundspace/Reference.hx",11,0x58753387)
HX_LOCAL_STACK_FRAME(_hx_pos_ddd0252177761b46_12_boot,"io.github.keystone_games.soundspace.Reference","boot",0x696a90a9,"io.github.keystone_games.soundspace.Reference.boot","io/github/keystone_games/soundspace/Reference.hx",12,0x58753387)
namespace io{
namespace github{
namespace keystone_games{
namespace soundspace{

void Reference_obj::__construct() { }

Dynamic Reference_obj::__CreateEmpty() { return new Reference_obj; }

void *Reference_obj::_hx_vtable = 0;

Dynamic Reference_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< Reference_obj > _hx_result = new Reference_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Reference_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x3222c463;
}

::String Reference_obj::APP_NAME;

::String Reference_obj::APP_ID;

::String Reference_obj::VERSION;

Float Reference_obj::VOLUME_MULTIPLIER;

::String Reference_obj::ASSET_GROUP;

 ::Dynamic Reference_obj::DEBUG;

::String Reference_obj::LAST_MAP;


Reference_obj::Reference_obj()
{
}

bool Reference_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"DEBUG") ) { outValue = ( DEBUG ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"APP_ID") ) { outValue = ( APP_ID ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"VERSION") ) { outValue = ( VERSION ); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"APP_NAME") ) { outValue = ( APP_NAME ); return true; }
		if (HX_FIELD_EQ(inName,"LAST_MAP") ) { outValue = ( LAST_MAP ); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"ASSET_GROUP") ) { outValue = ( ASSET_GROUP ); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"VOLUME_MULTIPLIER") ) { outValue = ( VOLUME_MULTIPLIER ); return true; }
	}
	return false;
}

bool Reference_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"DEBUG") ) { DEBUG=ioValue.Cast<  ::Dynamic >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"APP_ID") ) { APP_ID=ioValue.Cast< ::String >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"VERSION") ) { VERSION=ioValue.Cast< ::String >(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"APP_NAME") ) { APP_NAME=ioValue.Cast< ::String >(); return true; }
		if (HX_FIELD_EQ(inName,"LAST_MAP") ) { LAST_MAP=ioValue.Cast< ::String >(); return true; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"ASSET_GROUP") ) { ASSET_GROUP=ioValue.Cast< ::String >(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"VOLUME_MULTIPLIER") ) { VOLUME_MULTIPLIER=ioValue.Cast< Float >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *Reference_obj_sMemberStorageInfo = 0;
static hx::StaticInfo Reference_obj_sStaticStorageInfo[] = {
	{hx::fsString,(void *) &Reference_obj::APP_NAME,HX_("APP_NAME",09,4a,e2,67)},
	{hx::fsString,(void *) &Reference_obj::APP_ID,HX_("APP_ID",19,44,6a,42)},
	{hx::fsString,(void *) &Reference_obj::VERSION,HX_("VERSION",f8,ba,c5,fc)},
	{hx::fsFloat,(void *) &Reference_obj::VOLUME_MULTIPLIER,HX_("VOLUME_MULTIPLIER",06,cd,2f,cd)},
	{hx::fsString,(void *) &Reference_obj::ASSET_GROUP,HX_("ASSET_GROUP",30,10,51,98)},
	{hx::fsObject /*  ::Dynamic */ ,(void *) &Reference_obj::DEBUG,HX_("DEBUG",33,8a,0d,55)},
	{hx::fsString,(void *) &Reference_obj::LAST_MAP,HX_("LAST_MAP",d3,a0,3a,56)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static void Reference_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Reference_obj::APP_NAME,"APP_NAME");
	HX_MARK_MEMBER_NAME(Reference_obj::APP_ID,"APP_ID");
	HX_MARK_MEMBER_NAME(Reference_obj::VERSION,"VERSION");
	HX_MARK_MEMBER_NAME(Reference_obj::VOLUME_MULTIPLIER,"VOLUME_MULTIPLIER");
	HX_MARK_MEMBER_NAME(Reference_obj::ASSET_GROUP,"ASSET_GROUP");
	HX_MARK_MEMBER_NAME(Reference_obj::DEBUG,"DEBUG");
	HX_MARK_MEMBER_NAME(Reference_obj::LAST_MAP,"LAST_MAP");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Reference_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Reference_obj::APP_NAME,"APP_NAME");
	HX_VISIT_MEMBER_NAME(Reference_obj::APP_ID,"APP_ID");
	HX_VISIT_MEMBER_NAME(Reference_obj::VERSION,"VERSION");
	HX_VISIT_MEMBER_NAME(Reference_obj::VOLUME_MULTIPLIER,"VOLUME_MULTIPLIER");
	HX_VISIT_MEMBER_NAME(Reference_obj::ASSET_GROUP,"ASSET_GROUP");
	HX_VISIT_MEMBER_NAME(Reference_obj::DEBUG,"DEBUG");
	HX_VISIT_MEMBER_NAME(Reference_obj::LAST_MAP,"LAST_MAP");
};

#endif

hx::Class Reference_obj::__mClass;

static ::String Reference_obj_sStaticFields[] = {
	HX_("APP_NAME",09,4a,e2,67),
	HX_("APP_ID",19,44,6a,42),
	HX_("VERSION",f8,ba,c5,fc),
	HX_("VOLUME_MULTIPLIER",06,cd,2f,cd),
	HX_("ASSET_GROUP",30,10,51,98),
	HX_("DEBUG",33,8a,0d,55),
	HX_("LAST_MAP",d3,a0,3a,56),
	::String(null())
};

void Reference_obj::__register()
{
	Reference_obj _hx_dummy;
	Reference_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("io.github.keystone_games.soundspace.Reference",57,a7,ae,1f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Reference_obj::__GetStatic;
	__mClass->mSetStaticField = &Reference_obj::__SetStatic;
	__mClass->mMarkFunc = Reference_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(Reference_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< Reference_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Reference_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Reference_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Reference_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Reference_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_ddd0252177761b46_6_boot)
HXDLIN(   6)		APP_NAME = HX_("SoundSpace",97,a5,5c,e1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_ddd0252177761b46_7_boot)
HXDLIN(   7)		APP_ID = HX_("soundspace",97,31,7e,57);
            	}
{
            	HX_STACKFRAME(&_hx_pos_ddd0252177761b46_8_boot)
HXDLIN(   8)		VERSION = HX_("{dev}",03,bb,af,14);
            	}
{
            	HX_STACKFRAME(&_hx_pos_ddd0252177761b46_10_boot)
HXDLIN(  10)		VOLUME_MULTIPLIER = ((Float)1);
            	}
{
            	HX_STACKFRAME(&_hx_pos_ddd0252177761b46_11_boot)
HXDLIN(  11)		ASSET_GROUP = HX_("Default",a1,00,15,69);
            	}
{
            	HX_STACKFRAME(&_hx_pos_ddd0252177761b46_12_boot)
HXDLIN(  12)		DEBUG =  ::Dynamic(hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("overlay",90,43,10,a9),false)
            			->setFixed(1,HX_("pOLF",19,1a,44,4a),true));
            	}
}

} // end namespace io
} // end namespace github
} // end namespace keystone_games
} // end namespace soundspace
