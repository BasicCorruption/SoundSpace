// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_io_github_keystone_games_soundspace_Reference
#include <io/github/keystone_games/soundspace/Reference.h>
#endif
#ifndef INCLUDED_io_github_keystone_games_soundspace_SoundSpace
#include <io/github/keystone_games/soundspace/SoundSpace.h>
#endif
#ifndef INCLUDED_io_github_keystone_games_soundspace_ui_scene_StateLoading
#include <io/github/keystone_games/soundspace/ui/scene/StateLoading.h>
#endif
#ifndef INCLUDED_lime_system_System
#include <lime/system/System.h>
#endif
#ifndef INCLUDED_openfl_Lib
#include <openfl/Lib.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_MovieClip
#include <openfl/display/MovieClip.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_36c80a0fa46c35fc_19_new,"io.github.keystone_games.soundspace.SoundSpace","new",0xc9c74edd,"io.github.keystone_games.soundspace.SoundSpace.new","io/github/keystone_games/soundspace/SoundSpace.hx",19,0x2a0f1b73)
HX_LOCAL_STACK_FRAME(_hx_pos_36c80a0fa46c35fc_25_init,"io.github.keystone_games.soundspace.SoundSpace","init",0xc15669f3,"io.github.keystone_games.soundspace.SoundSpace.init","io/github/keystone_games/soundspace/SoundSpace.hx",25,0x2a0f1b73)
HX_LOCAL_STACK_FRAME(_hx_pos_36c80a0fa46c35fc_28_postInit,"io.github.keystone_games.soundspace.SoundSpace","postInit",0x0bba77f3,"io.github.keystone_games.soundspace.SoundSpace.postInit","io/github/keystone_games/soundspace/SoundSpace.hx",28,0x2a0f1b73)
HX_LOCAL_STACK_FRAME(_hx_pos_36c80a0fa46c35fc_36_exit,"io.github.keystone_games.soundspace.SoundSpace","exit",0xbeb92601,"io.github.keystone_games.soundspace.SoundSpace.exit","io/github/keystone_games/soundspace/SoundSpace.hx",36,0x2a0f1b73)
namespace io{
namespace github{
namespace keystone_games{
namespace soundspace{

void SoundSpace_obj::__construct(){
            	HX_STACKFRAME(&_hx_pos_36c80a0fa46c35fc_19_new)
HXLINE(  20)		super::__construct();
HXLINE(  21)		::io::github::keystone_games::soundspace::SoundSpace_obj::init();
            	}

Dynamic SoundSpace_obj::__CreateEmpty() { return new SoundSpace_obj; }

void *SoundSpace_obj::_hx_vtable = 0;

Dynamic SoundSpace_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< SoundSpace_obj > _hx_result = new SoundSpace_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool SoundSpace_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x19c29573) {
		if (inClassId<=(int)0x17120186) {
			if (inClassId<=(int)0x0ddfced7) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0ddfced7;
			} else {
				return inClassId==(int)0x17120186;
			}
		} else {
			return inClassId==(int)0x19c29573;
		}
	} else {
		if (inClassId<=(int)0x3f2b00af) {
			return inClassId==(int)0x1b123bf8 || inClassId==(int)0x3f2b00af;
		} else {
			return inClassId==(int)0x4bbee343;
		}
	}
}

void SoundSpace_obj::init(){
            	HX_STACKFRAME(&_hx_pos_36c80a0fa46c35fc_25_init)
HXDLIN(  25)		::io::github::keystone_games::soundspace::SoundSpace_obj::postInit();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SoundSpace_obj,init,(void))

void SoundSpace_obj::postInit(){
            	HX_GC_STACKFRAME(&_hx_pos_36c80a0fa46c35fc_28_postInit)
HXLINE(  29)		 ::openfl::display::MovieClip _hx_tmp = ::openfl::Lib_obj::get_current();
HXDLIN(  29)		_hx_tmp->addChild( ::flixel::FlxGame_obj::__alloc( HX_CTX ,0,0,hx::ClassOf< ::io::github::keystone_games::soundspace::ui::scene::StateLoading >(),1,240,165,false,false));
HXLINE(  30)		::haxe::Log_obj::trace(HX_("Playing menu music",f6,1a,9b,cd),hx::SourceInfo(HX_("src/main/haxe/io/github/keystone_games/soundspace/SoundSpace.hx",75,c5,66,7d),30,HX_("io.github.keystone_games.soundspace.SoundSpace",6b,9c,2d,72),HX_("postInit",90,9b,fa,03)));
HXLINE(  31)		::flixel::FlxG_obj::sound->playMusic(HX_("resources/data/Menu.wav",d8,57,d9,5b),::io::github::keystone_games::soundspace::Reference_obj::VOLUME_MULTIPLIER,true,null());
HXLINE(  32)		::haxe::Log_obj::trace((HX_("Music now playing: ",2f,71,13,1d) + HX_("resources/data/Menu.wav",d8,57,d9,5b)),hx::SourceInfo(HX_("src/main/haxe/io/github/keystone_games/soundspace/SoundSpace.hx",75,c5,66,7d),32,HX_("io.github.keystone_games.soundspace.SoundSpace",6b,9c,2d,72),HX_("postInit",90,9b,fa,03)));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(SoundSpace_obj,postInit,(void))

void SoundSpace_obj::exit(int exitCode){
            	HX_STACKFRAME(&_hx_pos_36c80a0fa46c35fc_36_exit)
HXLINE(  37)		::haxe::Log_obj::trace(HX_("Quitting application...",01,63,46,f7),hx::SourceInfo(HX_("src/main/haxe/io/github/keystone_games/soundspace/SoundSpace.hx",75,c5,66,7d),37,HX_("io.github.keystone_games.soundspace.SoundSpace",6b,9c,2d,72),HX_("exit",1e,f7,1d,43)));
HXLINE(  38)		::lime::_hx_system::System_obj::exit(exitCode);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(SoundSpace_obj,exit,(void))


hx::ObjectPtr< SoundSpace_obj > SoundSpace_obj::__new() {
	hx::ObjectPtr< SoundSpace_obj > __this = new SoundSpace_obj();
	__this->__construct();
	return __this;
}

hx::ObjectPtr< SoundSpace_obj > SoundSpace_obj::__alloc(hx::Ctx *_hx_ctx) {
	SoundSpace_obj *__this = (SoundSpace_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(SoundSpace_obj), true, "io.github.keystone_games.soundspace.SoundSpace"));
	*(void **)__this = SoundSpace_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

SoundSpace_obj::SoundSpace_obj()
{
}

bool SoundSpace_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"init") ) { outValue = init_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"exit") ) { outValue = exit_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"postInit") ) { outValue = postInit_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *SoundSpace_obj_sMemberStorageInfo = 0;
static hx::StaticInfo *SoundSpace_obj_sStaticStorageInfo = 0;
#endif

hx::Class SoundSpace_obj::__mClass;

static ::String SoundSpace_obj_sStaticFields[] = {
	HX_("init",10,3b,bb,45),
	HX_("postInit",90,9b,fa,03),
	HX_("exit",1e,f7,1d,43),
	::String(null())
};

void SoundSpace_obj::__register()
{
	SoundSpace_obj _hx_dummy;
	SoundSpace_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("io.github.keystone_games.soundspace.SoundSpace",6b,9c,2d,72);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &SoundSpace_obj::__GetStatic;
	__mClass->mSetStaticField = &hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = hx::Class_obj::dupFunctions(SoundSpace_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = hx::TCanCast< SoundSpace_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SoundSpace_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SoundSpace_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace io
} // end namespace github
} // end namespace keystone_games
} // end namespace soundspace
