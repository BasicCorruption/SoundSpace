// Generated by Haxe 4.0.5
#include <hxcpp.h>

#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_io_github_keystone_games_soundspace_ui_scene_StateLoading
#include <io/github/keystone_games/soundspace/ui/scene/StateLoading.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_630977beb92d0210_7_new,"io.github.keystone_games.soundspace.ui.scene.StateLoading","new",0xe61ddee5,"io.github.keystone_games.soundspace.ui.scene.StateLoading.new","io/github/keystone_games/soundspace/ui/scene/StateLoading.hx",7,0x82b9ff69)
HX_LOCAL_STACK_FRAME(_hx_pos_630977beb92d0210_11_create,"io.github.keystone_games.soundspace.ui.scene.StateLoading","create",0x696b7997,"io.github.keystone_games.soundspace.ui.scene.StateLoading.create","io/github/keystone_games/soundspace/ui/scene/StateLoading.hx",11,0x82b9ff69)
HX_LOCAL_STACK_FRAME(_hx_pos_630977beb92d0210_21_update,"io.github.keystone_games.soundspace.ui.scene.StateLoading","update",0x746198a4,"io.github.keystone_games.soundspace.ui.scene.StateLoading.update","io/github/keystone_games/soundspace/ui/scene/StateLoading.hx",21,0x82b9ff69)
namespace io{
namespace github{
namespace keystone_games{
namespace soundspace{
namespace ui{
namespace scene{

void StateLoading_obj::__construct( ::Dynamic MaxSize){
            	HX_STACKFRAME(&_hx_pos_630977beb92d0210_7_new)
HXDLIN(   7)		super::__construct(MaxSize);
            	}

Dynamic StateLoading_obj::__CreateEmpty() { return new StateLoading_obj; }

void *StateLoading_obj::_hx_vtable = 0;

Dynamic StateLoading_obj::__Create(hx::DynamicArray inArgs)
{
	hx::ObjectPtr< StateLoading_obj > _hx_result = new StateLoading_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool StateLoading_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x25a685e0) {
		if (inClassId<=(int)0x2335d9a7) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2335d9a7;
		} else {
			return inClassId==(int)0x25a685e0;
		}
	} else {
		return inClassId==(int)0x3634c52c || inClassId==(int)0x5552eebb;
	}
}

void StateLoading_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_630977beb92d0210_11_create)
HXLINE(  12)		this->super::create();
HXLINE(  14)		::io::github::keystone_games::soundspace::ui::scene::StateLoading_obj::bar =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE(  15)		::io::github::keystone_games::soundspace::ui::scene::StateLoading_obj::bar->makeGraphic(64,64,null(),null(),null());
HXLINE(  16)		{
HXLINE(  16)			 ::flixel::FlxSprite _this = ::io::github::keystone_games::soundspace::ui::scene::StateLoading_obj::bar;
HXDLIN(  16)			 ::flixel::util::FlxAxes axes = ::flixel::util::FlxAxes_obj::Y_dyn();
HXLINE(1070)			if (hx::IsNull( axes )) {
HXLINE(1070)				axes = ::flixel::util::FlxAxes_obj::XY_dyn();
            			}
HXLINE(  16)			bool _hx_tmp;
HXDLIN(  16)			switch((int)(axes->_hx_getIndex())){
            				case (int)0: case (int)2: {
HXLINE(  16)					_hx_tmp = true;
            				}
            				break;
            				default:{
HXLINE(  16)					_hx_tmp = false;
            				}
            			}
HXDLIN(  16)			if (_hx_tmp) {
HXLINE(  16)				int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN(  16)				_this->set_x(((( (Float)(_hx_tmp1) ) - _this->get_width()) / ( (Float)(2) )));
            			}
HXDLIN(  16)			bool _hx_tmp2;
HXDLIN(  16)			switch((int)(axes->_hx_getIndex())){
            				case (int)1: case (int)2: {
HXLINE(  16)					_hx_tmp2 = true;
            				}
            				break;
            				default:{
HXLINE(  16)					_hx_tmp2 = false;
            				}
            			}
HXDLIN(  16)			if (_hx_tmp2) {
HXLINE(  16)				int _hx_tmp3 = ::flixel::FlxG_obj::height;
HXDLIN(  16)				_this->set_y(((( (Float)(_hx_tmp3) ) - _this->get_height()) / ( (Float)(2) )));
            			}
            		}
HXLINE(  17)		::io::github::keystone_games::soundspace::ui::scene::StateLoading_obj::bar->set_x(( (Float)(0) ));
HXLINE(  18)		this->add(::io::github::keystone_games::soundspace::ui::scene::StateLoading_obj::bar);
            	}


void StateLoading_obj::update(Float dt){
            	HX_STACKFRAME(&_hx_pos_630977beb92d0210_21_update)
HXLINE(  22)		this->super::update(dt);
HXLINE(  24)		if (::io::github::keystone_games::soundspace::ui::scene::StateLoading_obj::bgLeft) {
HXLINE(  26)			 ::flixel::FlxSprite _g = ::io::github::keystone_games::soundspace::ui::scene::StateLoading_obj::bar;
HXDLIN(  26)			_g->set_x((_g->x - ( (Float)(10) )));
            		}
            		else {
HXLINE(  28)			 ::flixel::FlxSprite _g1 = ::io::github::keystone_games::soundspace::ui::scene::StateLoading_obj::bar;
HXDLIN(  28)			_g1->set_x((_g1->x + 10));
            		}
HXLINE(  30)		Float _hx_tmp = ::io::github::keystone_games::soundspace::ui::scene::StateLoading_obj::bar->x;
HXDLIN(  30)		int _hx_tmp1 = ::flixel::FlxG_obj::width;
HXDLIN(  30)		if ((_hx_tmp > (( (Float)(_hx_tmp1) ) - ::io::github::keystone_games::soundspace::ui::scene::StateLoading_obj::bar->get_width()))) {
HXLINE(  31)			::io::github::keystone_games::soundspace::ui::scene::StateLoading_obj::bgLeft = true;
            		}
HXLINE(  32)		if ((::io::github::keystone_games::soundspace::ui::scene::StateLoading_obj::bar->x < 0)) {
HXLINE(  33)			::io::github::keystone_games::soundspace::ui::scene::StateLoading_obj::bgLeft = false;
            		}
HXLINE(  34)		::haxe::Log_obj::trace(::io::github::keystone_games::soundspace::ui::scene::StateLoading_obj::bar->x,hx::SourceInfo(HX_("src/main/haxe/io/github/keystone_games/soundspace/ui/scene/StateLoading.hx",a7,70,0d,f3),34,HX_("io.github.keystone_games.soundspace.ui.scene.StateLoading",73,88,e9,e8),HX_("update",09,86,05,87)));
            	}


 ::flixel::FlxSprite StateLoading_obj::bar;

bool StateLoading_obj::bgLeft;


hx::ObjectPtr< StateLoading_obj > StateLoading_obj::__new( ::Dynamic MaxSize) {
	hx::ObjectPtr< StateLoading_obj > __this = new StateLoading_obj();
	__this->__construct(MaxSize);
	return __this;
}

hx::ObjectPtr< StateLoading_obj > StateLoading_obj::__alloc(hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	StateLoading_obj *__this = (StateLoading_obj*)(hx::Ctx::alloc(_hx_ctx, sizeof(StateLoading_obj), true, "io.github.keystone_games.soundspace.ui.scene.StateLoading"));
	*(void **)__this = StateLoading_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

StateLoading_obj::StateLoading_obj()
{
}

hx::Val StateLoading_obj::__Field(const ::String &inName,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return hx::Val( update_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

bool StateLoading_obj::__GetStatic(const ::String &inName, Dynamic &outValue, hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"bar") ) { outValue = ( bar ); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bgLeft") ) { outValue = ( bgLeft ); return true; }
	}
	return false;
}

bool StateLoading_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"bar") ) { bar=ioValue.Cast<  ::flixel::FlxSprite >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"bgLeft") ) { bgLeft=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static hx::StorageInfo *StateLoading_obj_sMemberStorageInfo = 0;
static hx::StaticInfo StateLoading_obj_sStaticStorageInfo[] = {
	{hx::fsObject /*  ::flixel::FlxSprite */ ,(void *) &StateLoading_obj::bar,HX_("bar",d3,b1,4a,00)},
	{hx::fsBool,(void *) &StateLoading_obj::bgLeft,HX_("bgLeft",6c,50,c8,af)},
	{ hx::fsUnknown, 0, null()}
};
#endif

static ::String StateLoading_obj_sMemberFields[] = {
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	::String(null()) };

static void StateLoading_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(StateLoading_obj::bar,"bar");
	HX_MARK_MEMBER_NAME(StateLoading_obj::bgLeft,"bgLeft");
};

#ifdef HXCPP_VISIT_ALLOCS
static void StateLoading_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(StateLoading_obj::bar,"bar");
	HX_VISIT_MEMBER_NAME(StateLoading_obj::bgLeft,"bgLeft");
};

#endif

hx::Class StateLoading_obj::__mClass;

static ::String StateLoading_obj_sStaticFields[] = {
	HX_("bar",d3,b1,4a,00),
	HX_("bgLeft",6c,50,c8,af),
	::String(null())
};

void StateLoading_obj::__register()
{
	StateLoading_obj _hx_dummy;
	StateLoading_obj::_hx_vtable = *(void **)&_hx_dummy;
	hx::Static(__mClass) = new hx::Class_obj();
	__mClass->mName = HX_("io.github.keystone_games.soundspace.ui.scene.StateLoading",73,88,e9,e8);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &StateLoading_obj::__GetStatic;
	__mClass->mSetStaticField = &StateLoading_obj::__SetStatic;
	__mClass->mMarkFunc = StateLoading_obj_sMarkStatics;
	__mClass->mStatics = hx::Class_obj::dupFunctions(StateLoading_obj_sStaticFields);
	__mClass->mMembers = hx::Class_obj::dupFunctions(StateLoading_obj_sMemberFields);
	__mClass->mCanCast = hx::TCanCast< StateLoading_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = StateLoading_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = StateLoading_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = StateLoading_obj_sStaticStorageInfo;
#endif
	hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace io
} // end namespace github
} // end namespace keystone_games
} // end namespace soundspace
} // end namespace ui
} // end namespace scene
